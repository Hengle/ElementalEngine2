#include "Shaders\HLSLconstants.h"
#include "Shaders\PSH_CommonFunctions.h"

struct v2f
{
	float2 TexCoord			: TEXCOORD0;
#if (ACTIVELIGHTS > 0)
	float4 TangentLight[ACTIVELIGHTS]	: TEXCOORD1;
#endif
	float4 ViewVectorFog		: TEXCOORD5;
	float4 PosOutDepth			: COLOR0;
	float3 EnvCoord				: COLOR1;
#if (DETAILLIGHTS > 0 )
	float3 Normal				: NORMAL;
#endif
};

uniform float4 ColorMultiplier : register(c19);
uniform float4 SpecularGlossReflection	: register(c20);
uniform float3 FogColor		: register(c21);

PS_MRT_OUTPUT main(v2f i,
	float FaceDir : VFACE, 
	uniform sampler2D CachedTexture : register(s0),
	uniform sampler2D NormalMap : register(s1),	
	uniform samplerCUBE EnvironmentalMap : register(s2))
{
	float4 outcolor  = tex2D(CachedTexture, i.TexCoord);

	half3 intensity = lightAmbient.xyz;
	half4 normalcolor = tex2D(NormalMap, i.TexCoord);
	float3 normal = UnpackNormal( normalcolor );
	float3 ViewVec = normalize( i.ViewVectorFog.xyz );
#if (ACTIVELIGHTS > 0)
	if( FaceDir <= 0 )
	{
		normal = -normal;
	}

	NormalizeLights( i.TangentLight );

	//half specular = SpecularMultiplier.x*CalcSpecular( normal, i.SpecularH, SpecularMultiplier.y, normalcolor.a, i.TangentLight[0].w  );
	//half3 specular = SpecularMultiplier.x*CalcColoredSpecular( normal, i.SpecularH, SpecularMultiplier.y, normalcolor.a, i.TangentLight[0].w  );

	half3 specular = SpecularGlossReflection.x*CalcMultiLightColoredSpecular( normal, ViewVec, SpecularGlossReflection.y, normalcolor.a, i.TangentLight );
	intensity += CalcLights( normal, i.TangentLight );
#endif

#if ( DETAILLIGHTS > 0 )
	intensity += CalcPixelLights( i.PosOutDepth.xyz, i.Normal, lightData );
#endif

	//multiply color by final intensity
	outcolor.xyz *= intensity;
	
	//add specular
#if( ACTIVELIGHTS > 0 )
	outcolor.xyz += specular;
#endif

	//cube lookups need not be normalized		
	float3 environment = texCUBE(EnvironmentalMap, i.EnvCoord);	
	outcolor.rgb = lerp( environment.rgb, outcolor.rgb, SpecularGlossReflection.z );
	
	outcolor *= ColorMultiplier;
	outcolor.rgb = lerp( outcolor.rgb, FogColor.rgb, i.ViewVectorFog.w );
	return MakeMRTOutput( outcolor, i.PosOutDepth.w );
}